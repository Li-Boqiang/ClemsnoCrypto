diff --git a/include/clang/Parse/Parser.h b/include/clang/Parse/Parser.h
index 59adfdcc7d..69bf88a371 100644
--- a/include/clang/Parse/Parser.h
+++ b/include/clang/Parse/Parser.h
@@ -191,9 +191,6 @@ class Parser : public CodeCompletionHandler {
   std::unique_ptr<PragmaHandler> STDCUnknownHandler;
   std::unique_ptr<PragmaHandler> AttributePragmaHandler;
 
-  std::unique_ptr<PragmaHandler> TaintHelperHandler;
-  std::unique_ptr<PragmaHandler> SinkHelperHandler;
-
   std::unique_ptr<CommentHandler> CommentSemaHandler;
 
   /// Whether the '>' token acts as an operator or not. This will be
diff --git a/lib/Parse/ParsePragma.cpp b/lib/Parse/ParsePragma.cpp
index cd61a582d7..07f48e0779 100644
--- a/lib/Parse/ParsePragma.cpp
+++ b/lib/Parse/ParsePragma.cpp
@@ -21,9 +21,6 @@
 #include "clang/Sema/LoopHint.h"
 #include "clang/Sema/Scope.h"
 #include "llvm/ADT/StringSwitch.h"
-
-#include <sstream>
-
 using namespace clang;
 
 namespace {
@@ -252,20 +249,6 @@ struct PragmaAttributeHandler : public PragmaHandler {
 
 }  // end namespace
 
-/// "\#pragma tainter taint(cond)"
-struct PragmaTaintHelperHandler : public PragmaHandler {
-	PragmaTaintHelperHandler()
-		: PragmaHandler("taint") {}
-	void HandlePragma(Preprocessor &PP, PragmaIntroducerKind Introducer,
-			Token &FirstToken) override;
-};
-struct PragmaSinkHelperHandler : public PragmaHandler {
-	PragmaSinkHelperHandler()
-		: PragmaHandler("sinktaint") {}
-	void HandlePragma(Preprocessor &PP, PragmaIntroducerKind Introducer,
-			Token &FirstToken) override;
-};
-
 void Parser::initializePragmaHandlers() {
   AlignHandler.reset(new PragmaAlignHandler());
   PP.AddPragmaHandler(AlignHandler.get());
@@ -357,11 +340,6 @@ void Parser::initializePragmaHandlers() {
     PP.AddPragmaHandler("clang", CUDAForceHostDeviceHandler.get());
   }
 
-  TaintHelperHandler.reset(new PragmaTaintHelperHandler());
-  PP.AddPragmaHandler("tainter", TaintHelperHandler.get());
-  SinkHelperHandler.reset(new PragmaSinkHelperHandler());
-  PP.AddPragmaHandler("tainter", SinkHelperHandler.get());
-
   OptimizeHandler.reset(new PragmaOptimizeHandler(Actions));
   PP.AddPragmaHandler("clang", OptimizeHandler.get());
 
@@ -2319,6 +2297,7 @@ void PragmaMSVtorDisp::HandlePragma(Preprocessor &PP,
     }
   }
 
+
   uint64_t Value = 0;
   if (Action & Sema::PSK_Push || Action & Sema::PSK_Set) {
     const IdentifierInfo *II = Tok.getIdentifierInfo();
@@ -2366,303 +2345,6 @@ void PragmaMSVtorDisp::HandlePragma(Preprocessor &PP,
   PP.EnterToken(AnnotTok);
 }
 
-///////////////////////////////
-//
-// Taint helper directives
-//
-
-// name of the call inserted in place of the triton assert directive
-// It must be provided at link time
-static char const TaintHelperFuncName[] = "__taint_fdf0f8a65855a52bbe69cd2075f89027";
-
-// push the declaration of __taint_fdf0f8a65855a52bbe69cd2075f89027(char const*, ...) into the stream
-// it is added before each call
-// FIXME: when in C++ mode, add the "C" of extern "C"
-static void PushTaintHelperDecl(Preprocessor& PP, SmallVectorImpl<Token>& TokenList, Token const& FirstToken) {
-    Token FuncNameTok;
-    FuncNameTok.startToken();
-    FuncNameTok.setKind(tok::identifier);
-    FuncNameTok.setIdentifierInfo(PP.getIdentifierInfo(TaintHelperFuncName));
-
-    Token ExternTok;
-    ExternTok.startToken();
-    ExternTok.setKind(tok::kw_extern);
-
-    Token VoidTok;
-    VoidTok.startToken();
-    VoidTok.setKind(tok::kw_void);
-
-    Token CharTok;
-    CharTok.startToken();
-    CharTok.setKind(tok::kw_char);
-
-    Token ConstTok;
-    ConstTok.startToken();
-    ConstTok.setKind(tok::kw_const);
-
-    Token StarTok;
-    StarTok.startToken();
-    StarTok.setKind(tok::star);
-
-    Token CommaTok;
-    CommaTok.startToken();
-    CommaTok.setKind(tok::comma);
-
-    Token LParTok;
-    LParTok.startToken();
-    LParTok.setKind(tok::l_paren);
-
-    Token EllipsisTok;
-    EllipsisTok.startToken();
-    EllipsisTok.setKind(tok::ellipsis);
-
-    Token RParTok;
-    RParTok.startToken();
-    RParTok.setKind(tok::r_paren);
-
-    Token SemiTok;
-    SemiTok.startToken();
-    SemiTok.setKind(tok::semi);
-
-    TokenList.push_back(ExternTok);
-    TokenList.push_back(VoidTok);
-    TokenList.push_back(FuncNameTok);
-    TokenList.push_back(LParTok);
-    TokenList.push_back(CharTok);
-    TokenList.push_back(ConstTok);
-    TokenList.push_back(StarTok);
-    TokenList.push_back(CommaTok);
-    TokenList.push_back(EllipsisTok);
-    TokenList.push_back(RParTok);
-    TokenList.push_back(SemiTok);
-
-}
-
-// Handle #pragma tainter taint(cond), where cond can make reference to identifiers
-// constants and address of identifiers.
-//
-// This works by inserting new tokens into the preprocessor stream, turning
-//
-// #pragma tainter taint(&a != &b && b > (c - 1) || c ^ 4)
-//
-// into
-//
-// extern __taint_fdf0f8a65855a52bbe69cd2075f89027(char const* fmt, ...);
-// __taint_fdf0f8a65855a52bbe69cd2075f89027("%0 != %1 && %2 > (%3 - 1) || %3 ^ 4", &a, &b, b, c)
-//
-void PragmaTaintHelperHandler::HandlePragma(Preprocessor &PP,
-                                             PragmaIntroducerKind Introducer,
-                                             Token &FirstToken) {
-  SmallVector<Token, 32> TokenList;
-  // an identifier is either a variable name, or its address (2 tokens)
-  // so use a vector of very small token vector to represent them
-  SmallVector<SmallVector<Token, 2>, 8> IdentifierTokenList;
-  std::map<std::string, size_t> Identifiers;
-  Token Tok;
-  PP.Lex(Tok);
-
-  // first add the extern declarator for extern __taint_fdf0f8a65855a52bbe69cd2075f89027(char const* fmt, ...);
-  PushTaintHelperDecl(PP, TokenList, FirstToken);
-
-  if (Tok.isNot(tok::l_paren)) {
-    PP.Diag(Tok.getLocation(), diag::err_function_is_not_record)
-      << PP.getSpelling(Tok) ;
-    return;
-  }
-
-  Token FuncNameTok;
-  FuncNameTok.startToken();
-  FuncNameTok.setKind(tok::identifier);
-  FuncNameTok.setIdentifierInfo(PP.getIdentifierInfo(TaintHelperFuncName));
-
-  Token LParTok;
-  LParTok.startToken();
-  LParTok.setKind(tok::l_paren);
-
-  Token CommaTok;
-  CommaTok.startToken();
-  CommaTok.setKind(tok::comma);
-
-  Token RParTok;
-  RParTok.startToken();
-  RParTok.setKind(tok::r_paren);
-
-  Token SemiTok;
-  SemiTok.startToken();
-  SemiTok.setKind(tok::semi);
-
-  Token FmtTok;
-  FmtTok.startToken();
-  FmtTok.setKind(tok::string_literal);
-  auto sdirective = std::string("\"AAAAAAAAAAAAAAAAAAAA\"");
-  FmtTok.setLiteralData(strdup(sdirective.c_str()));
-  FmtTok.setLength(sdirective.size());
-
-  TokenList.push_back(FuncNameTok);
-  TokenList.push_back(LParTok);
-  TokenList.push_back(FmtTok);
-  TokenList.push_back(CommaTok);
-
-  PP.Lex(Tok);
-  while(Tok.isNot(tok::eod)) {
-    TokenList.push_back(Tok);
-    //llvm::dbgs() << PP.getSpelling(Tok) << "\n";
-    PP.Lex(Tok);
-  }
-  //llvm::dbgs() << "aaaaaaaaaaaaaaaaaa" << "\n";
-
-  TokenList.push_back(SemiTok);
-
-  // lazily fix locations
-  for(Token& Tok : TokenList)
-    Tok.setLocation(FirstToken.getLocation());
-
-  // finally prepare memory, insert tokens in memory and feed the stream
-  auto TokenArray = llvm::make_unique<Token[]>(TokenList.size());
-  std::copy(TokenList.begin(), TokenList.end(), TokenArray.get());
-
-  PP.EnterTokenStream(std::move(TokenArray), TokenList.size(),
-                      /*DisableMacroExpansion=*/false);
-}
-
-static char const SinkHelperFuncName[] = "__sinktaint_fdf0f8a65855a52bbe69cd2075f89027";
-static void PushSinkHelperDecl(Preprocessor& PP, SmallVectorImpl<Token>& TokenList, Token const& FirstToken) {
-    Token FuncNameTok;
-    FuncNameTok.startToken();
-    FuncNameTok.setKind(tok::identifier);
-    FuncNameTok.setIdentifierInfo(PP.getIdentifierInfo(SinkHelperFuncName));
-
-    Token ExternTok;
-    ExternTok.startToken();
-    ExternTok.setKind(tok::kw_extern);
-
-    Token VoidTok;
-    VoidTok.startToken();
-    VoidTok.setKind(tok::kw_void);
-
-    Token CharTok;
-    CharTok.startToken();
-    CharTok.setKind(tok::kw_char);
-
-    Token ConstTok;
-    ConstTok.startToken();
-    ConstTok.setKind(tok::kw_const);
-
-    Token StarTok;
-    StarTok.startToken();
-    StarTok.setKind(tok::star);
-
-    Token CommaTok;
-    CommaTok.startToken();
-    CommaTok.setKind(tok::comma);
-
-    Token LParTok;
-    LParTok.startToken();
-    LParTok.setKind(tok::l_paren);
-
-    Token EllipsisTok;
-    EllipsisTok.startToken();
-    EllipsisTok.setKind(tok::ellipsis);
-
-    Token RParTok;
-    RParTok.startToken();
-    RParTok.setKind(tok::r_paren);
-
-    Token SemiTok;
-    SemiTok.startToken();
-    SemiTok.setKind(tok::semi);
-
-    TokenList.push_back(ExternTok);
-    TokenList.push_back(VoidTok);
-    TokenList.push_back(FuncNameTok);
-    TokenList.push_back(LParTok);
-    TokenList.push_back(CharTok);
-    TokenList.push_back(ConstTok);
-    TokenList.push_back(StarTok);
-    TokenList.push_back(CommaTok);
-    TokenList.push_back(EllipsisTok);
-    TokenList.push_back(RParTok);
-    TokenList.push_back(SemiTok);
-
-}
-
-
-void PragmaSinkHelperHandler::HandlePragma(Preprocessor &PP,
-                                             PragmaIntroducerKind Introducer,
-                                             Token &FirstToken) {
-  SmallVector<Token, 32> TokenList;
-  // an identifier is either a variable name, or its address (2 tokens)
-  // so use a vector of very small token vector to represent them
-  SmallVector<SmallVector<Token, 2>, 8> IdentifierTokenList;
-  std::map<std::string, size_t> Identifiers;
-  Token Tok;
-  PP.Lex(Tok);
-
-  // first add the extern declarator for extern __taint_fdf0f8a65855a52bbe69cd2075f89027(char const* fmt, ...);
-  PushSinkHelperDecl(PP, TokenList, FirstToken);
-
-  if (Tok.isNot(tok::l_paren)) {
-    PP.Diag(Tok.getLocation(), diag::err_function_is_not_record)
-      << PP.getSpelling(Tok) ;
-    return;
-  }
-
-  Token FuncNameTok;
-  FuncNameTok.startToken();
-  FuncNameTok.setKind(tok::identifier);
-  FuncNameTok.setIdentifierInfo(PP.getIdentifierInfo(SinkHelperFuncName));
-
-  Token LParTok;
-  LParTok.startToken();
-  LParTok.setKind(tok::l_paren);
-
-  Token CommaTok;
-  CommaTok.startToken();
-  CommaTok.setKind(tok::comma);
-
-  Token RParTok;
-  RParTok.startToken();
-  RParTok.setKind(tok::r_paren);
-
-  Token SemiTok;
-  SemiTok.startToken();
-  SemiTok.setKind(tok::semi);
-
-  Token FmtTok;
-  FmtTok.startToken();
-  FmtTok.setKind(tok::string_literal);
-  auto sdirective = std::string("\"AAAAAAAAAAAAAAAAAAAA\"");
-  FmtTok.setLiteralData(strdup(sdirective.c_str()));
-  FmtTok.setLength(sdirective.size());
-
-  TokenList.push_back(FuncNameTok);
-  TokenList.push_back(LParTok);
-  TokenList.push_back(FmtTok);
-  TokenList.push_back(CommaTok); 
-  PP.Lex(Tok);
-  while(Tok.isNot(tok::eod)) {
-    TokenList.push_back(Tok);
-    //llvm::dbgs() << PP.getSpelling(Tok) << "\n";
-    PP.Lex(Tok);
-  }
-  //llvm::dbgs() << "aaaaaaaaaaaaaaaaaa" << "\n";
-
-  TokenList.push_back(SemiTok);
-
-  // lazily fix locations
-  for(Token& Tok : TokenList)
-    Tok.setLocation(FirstToken.getLocation());
-
-  // finally prepare memory, insert tokens in memory and feed the stream
-  auto TokenArray = llvm::make_unique<Token[]>(TokenList.size());
-  std::copy(TokenList.begin(), TokenList.end(), TokenArray.get());
-
-  PP.EnterTokenStream(std::move(TokenArray), TokenList.size(),
-                      /*DisableMacroExpansion=*/false);
-}
-
-
-
 /// Handle all MS pragmas.  Simply forwards the tokens after inserting
 /// an annotation token.
 void PragmaMSPragma::HandlePragma(Preprocessor &PP,
